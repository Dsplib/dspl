/*!
	\ingroup DFT_GROUP
	\fn int dspl_dft(double *xR, double *xI, int n, double *yR, double *yI)
	\brief Discrete Fourier Transform.
	
	This function calculates $n$-point DFT of real or complex input signal
	\f[
		Y(k) = \sum_{m = 0}^{n-1} x(m) \cdot 
		\exp \left( -j \cdot \frac{2\pi}{n} \cdot m \cdot k \right),
	\f]
	
	\param[in]	xR	Input signal vector real  part pointer. 
					Vector size is `[n x 1]`. 
		
	\param[in]	xI	Input signal vector image part pointer. 
					Vector size is `[n x 1]`.
					This pointer can be `NULL` if DFT is calculated for a real signal
	
	\param[in]	n	DFT size (input and output vectors size).
	
	\param[out]	yR	DFT vector real  part pointer. 
					Vector size is `[n x 1]`.
					Memory must be allocated.
	
	\param[out]	yI	DFT vector image part pointer. 
					Vector size is `[n x 1]`.
					Memory must be allocated.
		
	
	\return
	DSPL_OK         if DFT is calculated successfully. <BR>
	DSPL_ERROR_PTR  if `xR == NULL` or `yR == NULL` or `yI == NULL`.<BR>
	DSPL_ERROR_SIZE if `n<1`.<BR>
	
	\note
		This function uses naive DFT calculation method. 
		You can use FFT algorithms if you need to calculate DFT more faster.
		
	\author
		Sergey Bakhurin.                                                         
		www.dsplib.org 
	
*/
