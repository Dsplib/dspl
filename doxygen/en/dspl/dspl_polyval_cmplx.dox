
/*!
	\ingroup SPEC_MATH_COMMON_GROUP
	\fn int dspl_polyval_cmplx(	double* aR, double* aI, int ord, 
								double* xR, double* xI, int n,
								double* yR, double* yI)
	\brief Complex values polynomial calculation
	
	Function calculates a \f$N-\f$ th order polynomial \f$P_N(x)\f$
	\f[
		P_N(x) = a_0 + a_1 \cdot x + a_2 \cdot x^2 + a_3*x^3 + ... a_N*x^N.
	\f]
	for vector argument `x`. Output is vector `y` which contains polynomial values for each x
	This function uses Horner's polynomial factorization:
	\f[
		P_N(x) = a_0 + x \cdot (a_1 + x \cdot (a_2 + \cdot ( \ldots x \cdot (a_{N-1} + x\cdot a_N) \ldots ))) 
	\f]
	
	\param[in]	aR		Polynomial coefficients real part vector pointer. 
						Vector size is `[ord+1 x 1]`.
						Coefficient `a[0]` corresponds to \f$a_0\f$ polynomial coefficient
						
	\param[in]	aI		Polynomial coefficients image part vector pointer. 
						Vector size is `[ord+1 x 1]`.
						Coefficient `a[0]` corresponds to \f$a_0\f$ polynomial coefficient
	
	\param[in]	ord		Polynomial order\f$N\f$. 
					  
	\param[in]	xR		Polynomial argument real part vector pointer. 
						Vector size is `[n x 1]`.
						Polynomial will be calculated for all `x` values.
					
	\param[in]	xI		Polynomial argument image part vector pointer. 
						Vector size is `[n x 1]`.
						Polynomial will be calculated for all `x` values.
	
	\param[in]	n		Polynomial argument vector size. 		
	
	\param[out]	yR	 	Polynomial real part values for all arguments `x`. 
						Vector size is `[n x 1]`
						Memory must be allocated.
	
	\param[out]	yI	 	Polynomial image part values for all arguments `x`. 
						Vector size is `[n x 1]`
						Memory must be allocated.

	\return
		`DSPL_OK` 			Polynomial is calculated successfully. <BR>	
		`DSPL_ERROR_PTR`	Pointers `aR`, `xR` and `yR` cannot to be as `NULL`. <BR>
							Pointer `yI` can be `NULL` only if `aI` and `xI` are `NULL`.
 		`DSPL_ERROR_SIZE` 	Argument vector size is wrong (`n < 1`). <BR>	
		`DSPL_ERROR_POLY_ORD` Polynomial order less than 0. <BR>
		
	\author
		Sergey Bakhurin. 
		www.dsplib.org	                                                               

*/