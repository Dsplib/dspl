
#ifdef DOXYGEN_EN
/*!
	\ingroup DFT_GROUP
	\fn int dspl_fft(double* xR, double* xI, int n, fft_t* pfft, double* yR, double* yI)
 	
	
	\brief Fast Fourier Transform.
	This function calculates DFT by using Cooley - Tukey decimation in time algorithm.
	
	\param[in]	xR		Input signal vector real  part pointer. Vector size is [n x 1]. 

\param[in]	xI  	Input signal vector image part pointer. Vector size is [n x 1].		This pointer can be NULL if FFT is calculated for a real signal

\param[in]	 n		FFT size (input and output vectors size).

\param[in]		pfft		FFT object pointer. This object can be calculated by dspl_fft_create function.

\param[out]		yR  FFT vector real  part pointer. Vector size is [n x 1].Memory must be allocated.
 
\param[out]	yI FFT vector image part pointer. Vector size is [n x 1]. Memory must be allocated.

\return
   DSPL_OK  if DFT is calculted successfuly
	 DSPL_ERROR_PTR  if xR == NULL or yR == NULL or yI == NULL
DSPL_ERROR_SIZE if n<1.
DSPL_ERROR_FFT_SIZE	if n is not radix-2
	
*/



/*!
\fn int dspl_fft_create(fft_t *pfft, int n)
\brief Fast Fourier Transform object create.

This function calculates precalculates twiddle-factors for FFT

\param[in, out]	 	pfft	 FFT object pointer. 
Memory for twiddle factor will be reallocated.

\param	[in]   		int n   New FFT size 


\return
 DSPL_OK         if FFT object is calculted successfuly
DSPL_ERROR_FFT_SIZE	if n is not power of 2


\note
If you have calculated fft object for FFT size more than n 
	then you no need to recalculate it. Function will return DSPL_OK in this case, 
but memory will not reallocated. So you need to clear current fft object  
(dspl_fft_free) and create it again if you want to decrease allocated memory.
fft object need 6*N*sizeof(double) bytes For N-points FFT algorithm.

*/


#elseif DOXYGEN_RU
/*!
	\ingroup DFT_GROUP
 
*/






#endif




